<?xml version="1.0"?>
<ruleset name="Desu Project Code Style Convention" namespace="CodeSniffer">
    <description>A coding standard used in Desu Project projects.</description>

    <!--
        If no files or directories are specified on the command line
        your custom standard can specify what files should be checked
        instead.

        Keep in mind that file and directory paths specified in a ruleset are
        relative to the ruleset's location, and that specifying any file or
        directory path on the command line will ignore all file tags.
     -->
    <file>./bin/console</file>
    <file>./config/bundles.php</file>
    <file>./public/index.php</file>
    <file>./src</file>

    <!-- ##############################################

    PSR-2 SNIFFS

    ############################################### -->

    <!-- Include all sniffs from PSR2 -->
    <rule ref="PSR2" />



    <!-- Disallow else if in favour elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>

    <!-- ##############################################

    PEAR SNIFFS

    ############################################### -->

    <!-- Forbid comments starting with `#` -->
    <rule ref="PEAR.Commenting.InlineComment" />

    <!-- ##############################################

    GENERIC SNIFFS

    ############################################### -->

    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />



    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch" />
    </rule>

    <!-- Forbid if (true) and if (false) -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />



    <!-- Forbid control structures without {} -->
    <rule ref="Generic.ControlStructures.InlineControlStructure" />



    <!-- Lines should be no longer than 100 characters -->
    <rule ref="Generic.Files.LineLength">
        <exclude-pattern>./tests/PHPUnit/*</exclude-pattern>
    </rule>



    <!-- Forbid multiple statements at one line -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements" />

    <!-- Require to place one space after type cast: $foo = (int) $bar -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />



    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions" />

    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions" />

    <!-- Throws an error or warning when any code prefixed with an asperand (@) is encountered. -->
    <rule ref="Generic.PHP.NoSilencedErrors" />



    <!-- This sniff checks that two strings using the same quoting style are not concatenated. -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" type="boolean" value="true" />
        </properties>
    </rule>



    <!-- This sniff checks that code blocks are indented correctly. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent" />

    <!-- ##############################################

        SQUIZ SNIFFS

    ############################################### -->

    <!-- Forbid spaces around square brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />



    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName" />



    <!-- Require to place one space around concatenation dot: $foo = 'bar' . $baz -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <!-- Only one space -->
            <property name="spacing" value="1" />

            <!-- This rule is ignored for multi line concatenations -->
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Require to use single quotes instead of double quotes. Ignored if string contains symbols like \t, \n ... -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage" />

    <!-- Forbid placing variables inside strings like this: $foo = "123 $bar" -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <message>Variable "%s" not allowed in double quoted string; use sprintf() or concatenation instead</message>
    </rule>



    <!-- Forbid placing empty line at first row of the function content -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />

    <!-- The php constructs echo, print, return, include, include_once, require, require_once, and new should have one space after them -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />

    <!-- Require to use one space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />

    <!-- Class properties should have one space between themselves. -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <!-- First property should not have space before it. -->
            <property name="spacingBeforeFirst" value="0" />
        </properties>
    </rule>

    <!-- Forbid placing spaces around `->` and `::` -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <!-- This rule is ignored for multi line chaining -->
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Require to place space around operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <!-- Ignores for new lines. -->
            <property name="ignoreNewlines" value="0" />
        </properties>
    </rule>

    <!-- Closing brace should be on same level as opening brace -->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace" />

    <!-- Require one space after keywords like `public`, `private` -->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />

    <!-- Forbid space before `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />

    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false" />
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>

    <!-- ##############################################

    SLEVOMAT'S SNIFFS

    ############################################### -->

    <!-- Let CodeSniffer know there is also Slevomat's standard, but don't include all sniffs -->
    <config name="installed_paths" value="vendor/slevomat/coding-standard/SlevomatCodingStandard" />




    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />



    <!-- Order uses alphabetically -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />

    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />

    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />

    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true" />
        </properties>
    </rule>

    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />



    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />

    <!-- Require space after colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountAfterColon" value="1" />
        </properties>
    </rule>
</ruleset>
